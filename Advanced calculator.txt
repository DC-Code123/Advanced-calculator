Software Development Life Cycle (SDLC) for Advanced Calculator

1. Requirement Analysis
    Goal: Build a user-friendly, robust calculator in C++.
    Features:
        Basic arithmetic operations (add, subtract, multiply, divide, modulus).
        Calculation history with save/load to file.
        Directory management for data storage.
        Error handling for user input and file operations.
        Beginner-friendly and well-commented code.

2. System Design
    Architecture: Modular C++ project with clear separation:
        main.cpp: User interface and main loop.
        funcs.cpp: Core logic, file handling, and math functions.
        Calc-header.h: Data structures and function declarations.
    Data Structure: struct calculation for storing each calculation.
    File Management: All history stored in /data/history.txt, directory created if missing.

3. Implementation
    Coding: Write code for all features, using clear and consistent style.
    Comments: Add detailed, beginner-friendly comments throughout.
    Validation: Implement input validation and exception handling.

4. Testing
    Unit Testing: Test each function (arithmetic, file I/O, parsing).
    Integration Testing: Test the full workflow (user input, calculation, history save/load).
    Error Testing: Test invalid inputs, file errors, and edge cases.

5. Deployment
    Build: Compile the project to calculator.exe.
    Distribute: Package with documentation and ensure data is created on first run.

6. Maintenance
    Bug Fixes: Address issues as they arise.
    Enhancements: Add new features (e.g., advanced math, backup/restore).
    Refactoring: Improve code readability and efficiency as needed.
